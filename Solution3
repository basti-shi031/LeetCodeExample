package com.example;

import java.util.HashMap;
import java.util.Map;

/**
 * Created by Bowen on 2015/10/22.
 */

/*Given a string, find the length of the longest substring without repeating characters. 
For example, the longest substring without repeating letters for "abcabcbb" is "abc", 
which the length is 3. For "bbbbb" the longest substring is "b", with the length of 1.*/

public class Solution3 {
    public static int lengthOfLongestSubstring(String s) {
        int length = s.length();
        if (length == 0||length == 1)
            return length;

        int max = 0;
        int start = 0;
        Map<Character, Integer> maps = new HashMap<>();
        for (int i = 0; i < length - 1; i++) {
            start = i;
            maps.put(s.charAt(start), 1);

            for (int j = i + 1; j < length; j++) {
                if (maps.containsKey(s.charAt(j))) {
                    max = Math.max(max, j - i);
                    maps.clear();
                    break;
                }
                maps.put(s.charAt(j), 1);
                if (j == length-1){
                    max = Math.max(max, j - i+1);
                    maps.clear();
                }
            }

        }
        return max;
    }
}
